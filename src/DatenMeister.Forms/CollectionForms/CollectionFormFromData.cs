using DatenMeister.Core;
using DatenMeister.Core.EMOF.Implementation;
using DatenMeister.Core.EMOF.Interface.Common;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Runtime.Workspaces;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.CollectionForms;

public class CollectionFormFromData(IWorkspaceLogic workspaceLogic, IScopeStorage scopeStorage)
    : INewCollectionFormFactory
{
    private readonly IWorkspaceLogic _workspaceLogic = workspaceLogic;
    private readonly IScopeStorage _scopeStorage = scopeStorage;

    public void CreateCollectionFormForCollection(
        IReflectiveCollection collection, 
        NewFormCreationContext context,
        FormCreationResult creationResult)
    {
        var tabs = new List<IElement>();

        var result = creationResult.Result ?? context.Global.Factory.create(_Forms.TheOne.__CollectionForm);
        
        result.set(_Forms._CollectionForm.name, "Items");
        result.set(_Forms._Form.isAutoGenerated, true);

        FormMethods.AddToFormCreationProtocol(
            result,
            "[NewCollectionFormCreator] Using Form Creator");

        var elementsAsObjects = collection.OfType<IObject>().ToList();
        var elementsWithoutMetaClass = elementsAsObjects
            .Where(x =>
            {
                var element = x as IElement;
                var metaClass = element?.getMetaClass();
                return metaClass is null; // or MofObjectShadow;
            })
            .ToList();

        var elementsWithMetaClass = elementsAsObjects
            .OfType<IElement>()
            .GroupBy(x =>
            {
                var metaClass = x.getMetaClass();
                return metaClass;// is MofObjectShadow ? null : metaClass;
            })
            .Where(x => x.Key != null)
            .ToList();

        // Goes through all the extent types and adds the default metaclasses into the list of tables
        var metaClasses = elementsWithMetaClass.Select(x => x.Key).ToList();

        // Create the tab for the elements of without any metaclass
        if (elementsWithoutMetaClass.Any() || elementsAsObjects.Count == 0)
        {
            var form = FormCreation.CreateTableFormForCollection(
                new TemporaryReflectiveCollection(elementsWithoutMetaClass),
                context with { IsForTableForm = true }).Result;
            if (form == null)
            {
                throw new InvalidOperationException("The form was not created... When it should have been.");
            }

            creationResult.AddToFormCreationProtocol(
                $"[{typeof(CollectionFormFromData)}]: Create ListForm for unclassified elements");

            form.set(_Forms._TableForm.name, "Unclassified");
            form.set(_Forms._TableForm.noItemsWithMetaClass, true);
                
            // TODO: Rescue - SortFieldsByImportantProperties(form);
                
            // Remove action create property buttons which were created and are covered by the list forms
            // being created below
            tabs.Add(form);
        }

        // Go through all the meta classes and create a tab for each of them
        foreach (var groupedMetaclass in metaClasses)
        {
            var group =
                elementsWithMetaClass.FirstOrDefault(
                    y => y.Key == groupedMetaclass)?.ToList()
                ?? [];

            // Now try to figure out the metaclass
            if (groupedMetaclass == null)
                // Should not happen, but we need to handle this
                continue;

            var extent = (collection as IHasExtent)?.Extent;
            if (extent == null) throw new InvalidOperationException("elements does not have an extent");

            creationResult.AddToFormCreationProtocol(
                $"[{typeof(CollectionFormFromData)}]: Create ListForm for metaclass: " +
                NamedElementMethods.GetName(groupedMetaclass));

            var form = FormCreation.CreateTableFormForMetaClass(
                           groupedMetaclass,
                           context with
                           {
                               IsReadOnly = true, IsForTableForm = true
                           }).Result ??
                       throw new InvalidOperationException("No form was found");

            /*
            if (context.CreateByMetaClass)
            {
                foreach (var element in @group)
                {
                    AddFieldsToFormByPropertyValues(form, element, context, cache);
                }
            }*/
            
            /* TODO: RESCUE
            FormMethods.AddToFormCreationProtocol(
                form,
                "[FormCreator.CreateCollectionFormForCollection]: Create Default Type for metaclass: " +
                NamedElementMethods.GetName(groupedMetaclass));
            FormMethods.AddDefaultTypeForNewElement(form, groupedMetaclass);
            */

            form.set(_Forms._TableForm.metaClass, groupedMetaclass);
            tabs.Add(form);
        }

        result.set(_Forms._CollectionForm.tab, tabs);

        creationResult.Result = result;
    }
}