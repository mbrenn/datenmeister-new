using System.Web;
using DatenMeister.Core.EMOF.Implementation;
using DatenMeister.Core.EMOF.Interface.Identifiers;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Helper;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.CollectionForms;

public class CollectionFormFromData : ICollectionFormFactory
{
    public void CreateCollectionForm(
        CollectionFormFactoryParameter parameter,
        FormCreationContext context,
        FormCreationResultOneForm result)
    {
        var extent = parameter.Extent;
        if (parameter.Collection == null || result.IsMainContentCreated)
            return;

        var collection = parameter.Collection;

        var tabs = new List<IElement>();

        result.Form ??= context.Global.Factory.create(_Forms.TheOne.__CollectionForm);

        result.Form.set(_Forms._CollectionForm.name, "Items");
        result.Form.set(_Forms._Form.isAutoGenerated, true);

        result.AddToFormCreationProtocol(
            "[CollectionFormFromData.CreateCollectionFormForCollection] Using Form Creator");

        var elementsAsObjects = collection.OfType<IObject>().ToList();
        var elementsWithoutMetaClass = elementsAsObjects
            .Where(x =>
            {
                var element = x as IElement;
                var metaClass = element?.getMetaClass();
                return metaClass is null; // or MofObjectShadow;
            })
            .ToList();

        var elementsWithMetaClass = elementsAsObjects
            .OfType<IElement>()
            .GroupBy(x =>
            {
                var metaClass = x.getMetaClass();
                return metaClass; // is MofObjectShadow ? null : metaClass;
            })
            .Where(x => x.Key != null)
            .ToList();

        // Goes through all the extent types and adds the default metaclasses into the list of tables
        var metaClasses = elementsWithMetaClass.Select(x => x.Key).ToList();

        // Create the tab for the elements of without any metaclass
        if (elementsWithoutMetaClass.Any() || elementsAsObjects.Count == 0)
        {
            var innerTableForm =
                FormCreation.CreateTableForm(
                        new TableFormFactoryParameter
                        {
                            Collection = new TemporaryReflectiveCollection(elementsWithoutMetaClass),
                            Extent = parameter.Extent,
                            ExtentTypes = parameter.ExtentTypes
                        },
                        context.Clone().SetIsForTableForm(true))
                    .Forms;
            if (innerTableForm == null)
            {
                throw new InvalidOperationException("The form was not created... When it should have been.");
            }

            result.AddToFormCreationProtocol(
                $"[{typeof(CollectionFormFromData)}.CreateCollectionFormForCollection]: Create ListForm for unclassified elements");

            foreach (var innerForm in innerTableForm)
            {
                innerForm.set(_Forms._TableForm.name, "Unclassified");
                innerForm.set(_Forms._TableForm.noItemsWithMetaClass, true);

                // Sets the dataurl of the table form
                if (extent != null)
                {
                    var dataUrl = GetUrlOfTableForm(extent, innerForm);
                    innerForm.set(_Forms._TableForm.dataUrl, dataUrl);
                }

                // Remove action create property buttons which were created and are covered by the list forms
                // being created below
                tabs.Add(innerForm);
            }
        }

        // Go through all the meta classes and create a tab for each of them
        foreach (var groupedMetaclass in metaClasses)
        {
            var group =
                elementsWithMetaClass.FirstOrDefault(y => y.Key == groupedMetaclass)?.ToList()
                ?? [];

            // Now try to figure out the metaclass
            if (groupedMetaclass == null)
                // Should not happen, but we need to handle this
                continue;

            result.AddToFormCreationProtocol(
                $"[{typeof(CollectionFormFromData)}.CreateCollectionFormForCollection]: Create ListForm for metaclass: " +
                NamedElementMethods.GetName(groupedMetaclass));

            var tableForm = FormCreation.CreateTableForm(
                                    new TableFormFactoryParameter
                                    {
                                        MetaClass = groupedMetaclass
                                    },
                                    context.Clone()
                                        .SetReadOnly(true)
                                        .SetIsForTableForm(true))
                                .Forms ??
                            throw new InvalidOperationException("No form was found");

            foreach (var innerForm in tableForm)
            {
                if (extent != null)
                {
                    // Sets the dataurl of the table form
                    var dataUrl = GetUrlOfTableForm(extent, innerForm);
                    innerForm.set(_Forms._TableForm.dataUrl, dataUrl);
                }

                innerForm.set(_Forms._TableForm.metaClass, groupedMetaclass);
                tabs.Add(innerForm);
            }
        }

        result.Form.set(_Forms._CollectionForm.tab, tabs);

        result.IsManaged = result.IsMainContentCreated = true;
    }

    private static string GetUrlOfTableForm(IExtent extent, IElement tableForm)
    {
        // Set the data url of the table form
        var dataUrl = (extent as IUriExtent)?.contextURI() ?? string.Empty;

        // If form also contains a metaclass, then the metaclass needs to be added
        var tableFormMetaClass =
            tableForm.getOrDefault<IElement>(_Forms._TableForm.metaClass);
        var metaClassUri = tableFormMetaClass?.GetUri();

        if (!string.IsNullOrEmpty(metaClassUri))
        {
            dataUrl += "?metaclass=" + HttpUtility.UrlEncode(metaClassUri);
        }

        return dataUrl;
    }

    public void CreateCollectionFormForMetaClass(
        IElement metaClass,
        FormCreationContext context,
        FormCreationResultOneForm result)
    {
        result.Form ??= context.Global.Factory.create(_Forms.TheOne.__CollectionForm);
        result.Form.set(_Forms._ObjectForm.name, $"ListForm for '{NamedElementMethods.GetName(metaClass)}'");
        result.Form.set(_Forms._ObjectForm.isAutoGenerated, true);

        result.AddToFormCreationProtocol(
            "[CollectionFormFromData.CreateCollectionFormForItemsMetaClass]: Add Extent by Metaclass: " +
            NamedElementMethods.GetName(metaClass));

        var tabs = new List<IElement>();

        // Get all properties of the elements
        var properties = ClassifierMethods.GetPropertiesOfClassifier(metaClass).ToList();
        if (properties == null)
            throw new InvalidOperationException(
                "CollectionForm cannot be created because given element does not have properties");

        var propertiesWithCollection =
            (from p in properties
                where PropertyMethods.IsCollection(p)
                select new { propertyName = NamedElementMethods.GetName(p), property = p }).ToList();

        var propertiesWithoutCollection =
            (from p in properties
                where !PropertyMethods.IsCollection(p)
                select new { propertyName = NamedElementMethods.GetName(p), property = p }).ToList();

        //       if (propertiesWithoutCollection.Any() /*|| creationMode.AutomaticMetaClassField*/)
        /*       {
                   var innerContext = context.Clone();
                   FormCreation.CreateRowFormForMetaClass(ProcessPriorityClass)
                   var rowForm = factory.create(_Forms.TheOne.__RowForm);
                   rowForm.set(_Forms._RowForm.name, "Detail");
                   rowForm.set(_Forms._RowForm.isAutoGenerated, true);

                   FormMethods.AddToFormCreationProtocol(
                       collectionForm,
                       "[FormCreator.CreateCollectionFormForItemsMetaClass]: Add DetailForm");

                   var fields = new List<IElement>();
                   var fieldCreator = new FieldCreator(WorkspaceLogic, ScopeStorage);
                   foreach (var property in propertiesWithoutCollection)
                   {
                       var field = fieldCreator.CreateFieldForProperty(property.property,
                           null,
                           new FormFactoryContext { IsReadOnly = true });
                       fields.Add(field);

                       FormMethods.AddToFormCreationProtocol(
                           collectionForm,
                           "[FormCreator.CreateCollectionFormForItemsMetaClass]: Add Field to RowForm: " +
                           NamedElementMethods.GetName(field));
                   }

                   if (creationMode.AutomaticMetaClassField
                       || !FormMethods.HasMetaClassFieldInForm(rowForm))
                   {
                       // Add the element itself
                       var metaClassField = factory.create(_Forms.TheOne.__MetaClassElementFieldData);
                       metaClassField.set(_Forms._MetaClassElementFieldData.name, "Metaclass");
                       fields.Add(metaClassField);

                       FormMethods.AddToFormCreationProtocol(
                           collectionForm,
                           "[FormCreator.CreateCollectionFormForItemsMetaClass]: Add MetaClass Field to RowForm");
                   }

                   rowForm.set(_Forms._RowForm.field, fields);

                   // RowFormCreator.CleanupRowForm(rowForm);

                   tabs.Add(rowForm);
               }*/

        foreach (var pair in propertiesWithCollection)
        {
            result.AddToFormCreationProtocol(
                "[CollectionFormFromData.CreateCollectionFormForItemsMetaClass]: Add ListForm: " +
                NamedElementMethods.GetName(pair.property));

            var propertyType = PropertyMethods.GetPropertyType(pair.property);
            if (propertyType != null)
            {
                // Now try to figure out the metaclass

                var tableForm = FormCreation.CreateTableForm(
                                    new TableFormFactoryParameter
                                    {
                                        MetaClass = propertyType
                                    },
                                    context.Clone()).Forms
                                ?? throw new InvalidOperationException("No form was found");

                foreach (var form in tableForm)
                {
                    form.set(
                        _Forms._TableForm.title,
                        "Property: packagedElements of type " + NamedElementMethods.GetName(propertyType));
                    tabs.Add(form);
                }

                
            }
        }

        result.Form.set(_Forms._CollectionForm.tab, tabs);
        result.IsManaged = result.IsMainContentCreated = true;
    }
}