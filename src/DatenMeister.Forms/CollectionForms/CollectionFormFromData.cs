using System.Web;
using DatenMeister.Core.EMOF.Implementation;
using DatenMeister.Core.EMOF.Interface.Identifiers;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Helper;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.Fields;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.CollectionForms;

public class CollectionFormFromData : ICollectionFormFactory
{
    public void CreateCollectionForm(
        CollectionFormFactoryParameter parameter,
        FormCreationContext context,
        FormCreationResultOneForm result)
    {
        var extent = parameter.Extent;
        if (parameter.Collection == null || result.IsMainContentCreated)
            return;

        var collection = parameter.Collection;

        var tabs = new List<IElement>();

        result.Form ??= context.Global.Factory.create(_Forms.TheOne.__CollectionForm);

        result.Form.set(_Forms._CollectionForm.name, "Items");
        result.Form.set(_Forms._Form.isAutoGenerated, true);

        result.AddToFormCreationProtocol(
            "[CollectionFormFromData.CreateCollectionFormForCollection] Using Form Creator");

        var elementsAsObjects = collection.OfType<IObject>().ToList();
        var elementsWithoutMetaClass = elementsAsObjects
            .Where(x =>
            {
                var element = x as IElement;
                var metaClass = element?.getMetaClass();
                return metaClass is null; // or MofObjectShadow;
            })
            .ToList();

        var elementsWithMetaClass = elementsAsObjects
            .OfType<IElement>()
            .GroupBy(x =>
            {
                var metaClass = x.getMetaClass();
                return metaClass; // is MofObjectShadow ? null : metaClass;
            })
            .Where(x => x.Key != null)
            .ToList();

        // Goes through all the extent types and adds the default metaclasses into the list of tables
        var metaClasses = elementsWithMetaClass.Select(x => x.Key).ToList();

        // Create the tab for the elements of without any metaclass
        if (elementsWithoutMetaClass.Any() || elementsAsObjects.Count == 0)
        {
            var innerTableForm =
                FormCreation.CreateTableForm(
                        new TableFormFactoryParameter
                        {
                            Collection = new TemporaryReflectiveCollection(elementsWithoutMetaClass),
                            Extent = parameter.Extent,
                            ExtentTypes = parameter.ExtentTypes
                        },
                        context.Clone())
                    .Forms;
            if (innerTableForm == null)
            {
                throw new InvalidOperationException("The form was not created... When it should have been.");
            }

            result.AddToFormCreationProtocol(
                $"[{typeof(CollectionFormFromData)}.CreateCollectionFormForCollection]: Create ListForm for unclassified elements");

            foreach (var innerForm in innerTableForm)
            {
                innerForm.set(_Forms._TableForm.name, "Unclassified");
                innerForm.set(_Forms._TableForm.noItemsWithMetaClass, true);

                // Sets the dataurl of the table form
                if (extent != null)
                {
                    var dataUrl = GetUrlOfTableForm(extent, innerForm);
                    innerForm.set(_Forms._TableForm.dataUrl, dataUrl);
                }

                // Remove action create property buttons which were created and are covered by the list forms
                // being created below
                tabs.Add(innerForm);
            }
        }

        // Go through all the meta classes and create a tab for each of them
        foreach (var groupedMetaclass in metaClasses)
        {
            var group =
                elementsWithMetaClass.FirstOrDefault(y => y.Key == groupedMetaclass)?.ToList()
                ?? [];

            // Now try to figure out the metaclass
            if (groupedMetaclass == null)
                // Should not happen, but we need to handle this
                continue;

            result.AddToFormCreationProtocol(
                $"[{typeof(CollectionFormFromData)}.CreateCollectionFormForCollection]: Create ListForm for metaclass: " +
                NamedElementMethods.GetName(groupedMetaclass));

            var tableForm = FormCreation.CreateTableForm(
                                    new TableFormFactoryParameter
                                    {
                                        MetaClass = groupedMetaclass
                                    },
                                    context.Clone()
                                        .SetReadOnly(true))
                                .Forms ??
                            throw new InvalidOperationException("No form was found");

            foreach (var innerForm in tableForm)
            {
                if (extent != null)
                {
                    // Sets the dataurl of the table form
                    var dataUrl = GetUrlOfTableForm(extent, innerForm);
                    innerForm.set(_Forms._TableForm.dataUrl, dataUrl);
                }

                innerForm.set(_Forms._TableForm.metaClass, groupedMetaclass);
                tabs.Add(innerForm);
            }
        }

        result.Form.set(_Forms._CollectionForm.tab, tabs);

        result.IsManaged = result.IsMainContentCreated = true;
    }

    private static string GetUrlOfTableForm(IExtent extent, IElement tableForm)
    {
        // Set the data url of the table form
        var dataUrl = (extent as IUriExtent)?.contextURI() ?? string.Empty;

        // If form also contains a metaclass, then the metaclass needs to be added
        var tableFormMetaClass =
            tableForm.getOrDefault<IElement>(_Forms._TableForm.metaClass);
        var metaClassUri = tableFormMetaClass?.GetUri();

        if (!string.IsNullOrEmpty(metaClassUri))
        {
            dataUrl += "?metaclass=" + HttpUtility.UrlEncode(metaClassUri);
        }

        return dataUrl;
    }
}