using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.CollectionForms;

public class CollectionFormFromMetaClass : ICollectionFormFactory
{
    public void CreateCollectionForm(CollectionFormFactoryParameter parameter, FormCreationContext context,
        FormCreationResultOneForm result)
    {
        if (result.IsMainContentCreated)
            return;

        if (parameter.MetaClass == null)
            return;

        var metaClass = parameter.MetaClass;

        result.Form ??= context.Global.Factory.create(_Forms.TheOne.__CollectionForm);
        result.Form.set(_Forms._ObjectForm.name, $"ListForm for '{NamedElementMethods.GetName(metaClass)}'");
        result.Form.set(_Forms._ObjectForm.isAutoGenerated, true);

        result.AddToFormCreationProtocol(
            "[CollectionFormFromData.CreateCollectionFormForItemsMetaClass]: Add Extent by Metaclass: " +
            NamedElementMethods.GetName(metaClass));

        var tabs = new List<IElement>();

        // Get all properties of the elements
        result.AddToFormCreationProtocol(
            "[CollectionFormFromData.CreateCollectionFormForItemsMetaClass]: Add ListForm: " +
            NamedElementMethods.GetName(metaClass));

        // Now try to figure out the metaclass
        foreach (var tableForm in FormCreation.CreateTableForm(
                     new TableFormFactoryParameter
                     {
                         MetaClass = metaClass,
                         ParentMetaClass = parameter.MetaClass
                     }, context.Clone()).Forms)
        {
            tabs.Add(tableForm);
        }

        result.Form.set(_Forms._CollectionForm.tab, tabs);
        result.IsManaged = result.IsMainContentCreated = true;
    }
}