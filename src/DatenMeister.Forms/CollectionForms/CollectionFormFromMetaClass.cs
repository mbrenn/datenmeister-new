using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.CollectionForms;

public class CollectionFormFromMetaClass : ICollectionFormFactory
{
    public void CreateCollectionForm(CollectionFormFactoryParameter parameter, FormCreationContext context,
        FormCreationResultOneForm result)
    {
        if (parameter.MetaClass == null)
            return;
        
        var metaClass = parameter.MetaClass;
        
        result.Form ??= context.Global.Factory.create(_Forms.TheOne.__CollectionForm);
        result.Form.set(_Forms._ObjectForm.name, $"ListForm for '{NamedElementMethods.GetName(metaClass)}'");
        result.Form.set(_Forms._ObjectForm.isAutoGenerated, true);

        result.AddToFormCreationProtocol(
            "[CollectionFormFromData.CreateCollectionFormForItemsMetaClass]: Add Extent by Metaclass: " +
            NamedElementMethods.GetName(metaClass));

        var tabs = new List<IElement>();

        // Get all properties of the elements
        var properties = ClassifierMethods.GetPropertiesOfClassifier(metaClass).ToList();
        if (properties == null)
            throw new InvalidOperationException(
                "CollectionForm cannot be created because given element does not have properties");

        var propertiesWithCollection =
            (from p in properties
                where PropertyMethods.IsCollection(p)
                select new { propertyName = NamedElementMethods.GetName(p), property = p }).ToList();

        var propertiesWithoutCollection =
            (from p in properties
                where !PropertyMethods.IsCollection(p)
                select new { propertyName = NamedElementMethods.GetName(p), property = p }).ToList();

        //       if (propertiesWithoutCollection.Any() /*|| creationMode.AutomaticMetaClassField*/)
        /*       {
                   var innerContext = context.Clone();
                   FormCreation.CreateRowFormForMetaClass(ProcessPriorityClass)
                   var rowForm = factory.create(_Forms.TheOne.__RowForm);
                   rowForm.set(_Forms._RowForm.name, "Detail");
                   rowForm.set(_Forms._RowForm.isAutoGenerated, true);

                   FormMethods.AddToFormCreationProtocol(
                       collectionForm,
                       "[FormCreator.CreateCollectionFormForItemsMetaClass]: Add DetailForm");

                   var fields = new List<IElement>();
                   var fieldCreator = new FieldCreator(WorkspaceLogic, ScopeStorage);
                   foreach (var property in propertiesWithoutCollection)
                   {
                       var field = fieldCreator.CreateFieldForProperty(property.property,
                           null,
                           new FormFactoryContext { IsReadOnly = true });
                       fields.Add(field);

                       FormMethods.AddToFormCreationProtocol(
                           collectionForm,
                           "[FormCreator.CreateCollectionFormForItemsMetaClass]: Add Field to RowForm: " +
                           NamedElementMethods.GetName(field));
                   }

                   if (creationMode.AutomaticMetaClassField
                       || !FormMethods.HasMetaClassFieldInForm(rowForm))
                   {
                       // Add the element itself
                       var metaClassField = factory.create(_Forms.TheOne.__MetaClassElementFieldData);
                       metaClassField.set(_Forms._MetaClassElementFieldData.name, "Metaclass");
                       fields.Add(metaClassField);

                       FormMethods.AddToFormCreationProtocol(
                           collectionForm,
                           "[FormCreator.CreateCollectionFormForItemsMetaClass]: Add MetaClass Field to RowForm");
                   }

                   rowForm.set(_Forms._RowForm.field, fields);

                   // RowFormCreator.CleanupRowForm(rowForm);

                   tabs.Add(rowForm);
               }*/

        foreach (var pair in propertiesWithCollection)
        {
            result.AddToFormCreationProtocol(
                "[CollectionFormFromData.CreateCollectionFormForItemsMetaClass]: Add ListForm: " +
                NamedElementMethods.GetName(pair.property));

            var propertyType = PropertyMethods.GetPropertyType(pair.property);
            if (propertyType != null)
            {
                // Now try to figure out the metaclass

                foreach (var tableForm in FormCreation.CreateTableForm(
                             new TableFormFactoryParameter
                             {
                                 MetaClass = propertyType
                             }, context.Clone()).Forms)
                {
                    tableForm.set(
                        _Forms._TableForm.title,
                        "Property: packagedElements of type " + NamedElementMethods.GetName(propertyType));

                    tabs.Add(tableForm);
                }
            }
        }

        result.Form.set(_Forms._CollectionForm.tab, tabs);
        result.IsManaged = result.IsMainContentCreated = true;
        
    }
}