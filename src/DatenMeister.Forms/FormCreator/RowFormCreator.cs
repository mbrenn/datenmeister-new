using DatenMeister.Core;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Runtime.Workspaces;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FormFactory;
using DatenMeister.Forms.Helper;

namespace DatenMeister.Forms.FormCreator;

[Obsolete]
public class RowFormCreator : FormCreator, IRowFormFactory
{
    public RowFormCreator(IWorkspaceLogic workspaceLogic, IScopeStorage scopeStorage)
    :base (workspaceLogic, scopeStorage)
    {
        
    }
    
    /// <summary>
    ///     Creates a detail form by considering the the information that is stored within
    ///     the given element. Dependent upon the creation mode, the form will be created
    ///     by using the metaclass or the set properties
    /// </summary>
    /// <param name="element"></param>
    /// <param name="creationMode"></param>
    /// <returns></returns>
    public IElement CreateRowFormForItem(IObject element, FormFactoryContext? creationMode = null)
    {
        creationMode ??= new FormFactoryContext();
        var cache = new FormCreatorCache();
        var createdForm = GetMofFactory(creationMode).create(_Forms.TheOne.__RowForm);
        createdForm.set(_Forms._RowForm.name, "Item");
        createdForm.set(_Forms._RowForm.isAutoGenerated, true);

        FormMethods.AddToFormCreationProtocol(
            createdForm,
            "[FormCreator.CreateRowFormForItem]: " + NamedElementMethods.GetName(element));

        if (!creationMode.AutomaticMetaClassField)
            createdForm.set(_Forms._RowForm.hideMetaInformation, true);

        AddFieldsToForm(createdForm, element, creationMode, cache);
        CleanupRowForm(createdForm);
        return createdForm;
    }

    /// <summary>
    ///     Creates a detail form by using the metaclass of the given element
    /// </summary>
    /// <param name="metaClass">Metaclass to which the form will be created</param>
    /// <param name="creationMode">The creation mode being used</param>
    /// <returns>The created form for the metaclass</returns>
    public IElement CreateRowFormByMetaClass(IElement? metaClass, FormFactoryContext? creationMode = null)
    {
        creationMode ??= new FormFactoryContext();
        var createdForm = GetMofFactory(creationMode).create(_Forms.TheOne.__RowForm);
        var name = NamedElementMethods.GetName(metaClass);
        createdForm.set(_Forms._RowForm.name, $"{name} - Detail");
        createdForm.set(_Forms._RowForm.isAutoGenerated, true);

        FormMethods.AddToFormCreationProtocol(
            createdForm,
            "[FormCreator.CreateRowFormByMetaClass]: " + NamedElementMethods.GetName(metaClass));

        if (creationMode.AutomaticMetaClassField)
        {
            createdForm.set(_Forms._RowForm.hideMetaInformation, true);
        }

        if (!AddFieldsToRowOrTableFormByMetaClass(createdForm, metaClass, creationMode))
        {
            createdForm.set(_Forms._RowForm.allowNewProperties, true);
        }

        CleanupRowForm(createdForm);
        return createdForm;
    }
        
    public static void CleanupRowForm(IElement rowForm)
    {
        SortFieldsByImportantProperties(rowForm);
    }
}