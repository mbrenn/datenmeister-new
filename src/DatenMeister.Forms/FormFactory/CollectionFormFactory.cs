using BurnSystems.Logging;
using DatenMeister.Core;
using DatenMeister.Core.EMOF.Interface.Common;
using DatenMeister.Core.EMOF.Interface.Identifiers;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Helper;
using DatenMeister.Core.Models;
using DatenMeister.Core.Runtime.Workspaces;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FormCreator;
using DatenMeister.Forms.FormFinder;
using DatenMeister.Forms.FormModifications;

namespace DatenMeister.Forms.FormFactory;

public class CollectionFormFactory : FormFactoryBase, ICollectionFormFactory
{
    public CollectionFormFactory(IWorkspaceLogic workspaceLogic, IScopeStorage scopeStorage)
        :base (workspaceLogic, scopeStorage)
    {
        
    }
    
    /// <summary>
    ///     Defines the logger
    /// </summary>
    private static readonly ILogger Logger = new ClassLogger(typeof(CollectionFormFactory));
    
    /// <summary>
    /// Creates an empty collection from with one tab including a table definition with name
    /// </summary>
    /// <param name="configuration">Configuration to be used</param>
    /// <returns>The created collection form</returns>
    public IElement CreateEmptyCollectionForm(FormFactoryConfiguration configuration)
    {
        var factory = GetMofFactory(configuration);

        var collectionForm = factory.create(_Forms.TheOne.__CollectionForm);
        collectionForm.set(_Forms._ObjectForm.isAutoGenerated, true);

        var tableForm = factory.create(_Forms.TheOne.__TableForm);
        collectionForm.set(_Forms._ObjectForm.tab, new[] { tableForm });
        FormMethods.AddToFormCreationProtocol(
            collectionForm,
            "[CreateEmptyCollectionForm] Empty object Collection-Form created");

        return collectionForm;
    }

    /// <summary>
    /// Creates a collection form for the given metaclass.
    /// </summary>
    /// <param name="metaClass">Metaclass to which a collection form shall be created</param>
    /// <param name="configuration">Configuration defining the way how the form shall
    /// be created</param>
    /// <returns>The collection form being created</returns>
    public IElement? CreateCollectionFormForMetaClass(IElement metaClass, FormFactoryConfiguration configuration)
    {
        using var _ = new StopWatchLogger(Logger, "Timing for CreateCollectionFormForMetaClass: ", LogLevel.Trace);
        IElement? foundForm = null;

        if (configuration.ViaFormFinder)
        {
            // Tries to find the form
            var viewFinder = new FormFinder.FormFinder(FormMethods);
            foundForm = viewFinder.FindFormsFor(
                new FindFormQuery
                {
                    metaClass = metaClass,
                    FormType = _Forms.___FormType.Collection,
                    viewModeId = configuration.ViewModeId
                }).FirstOrDefault();

            if (foundForm != null)
            {
                foundForm = FormMethods.CloneForm(foundForm);
                Logger.Info("CreateCollectionFormForMetaClass: Found form: " +
                            NamedElementMethods.GetFullName(foundForm));
                FormMethods.AddToFormCreationProtocol(foundForm,
                    "[FormFactory.CreateCollectionFormForMetaClass] Found Form via FormFinder: " + foundForm.GetUri());
            }
        }

        if (foundForm == null && configuration.ViaFormCreator)
        {
            // Ok, we have not found the form. So create one
            var formCreator = new CollectionFormCreator(WorkspaceLogic, ScopeStorage);
            foundForm = formCreator.CreateCollectionFormForMetaClass(
                metaClass,
                configuration with { AllowFormModifications = false});
            FormMethods.AddToFormCreationProtocol(foundForm, "[FormFactory.CreateCollectionFormForMetaClass] Found Form via FormCreator");
        }

        // If for whatever reason, we got a row form or table form returned, 
        // create the collection form
        if (foundForm != null &&
            foundForm.metaclass?.equals(_Forms.TheOne.__CollectionForm) != true && 
            foundForm.metaclass?.equals(_Forms.TheOne.__ObjectForm) != true)
        {
            foundForm = CollectionFormCreator.CreateCollectionFormFromTabs(foundForm);
            FormMethods.AddToFormCreationProtocol(foundForm, "[FormFactory.CreateCollectionFormForMetaClass] Transformed Form to Extent Form");
        }

        if (foundForm != null)
        {
            var formCreationContext = new FormCreationContext
            {
                MetaClass = metaClass,
                FormType = _Forms.___FormType.Collection,
                ViewMode = configuration.ViewModeId,
                IsReadOnly = configuration.IsReadOnly
            };

            CallPluginsForCollectionOrObjectForm(configuration, formCreationContext, ref foundForm);
            CleanupCollectionForm(foundForm, true);
        }

        return foundForm;
    }

    /// <summary>
    /// Takes the given extent and creates a collection form out of it
    /// </summary>
    /// <param name="extent">Extent to be evaluated.</param>
    /// <param name="configuration">Configuration which defines the way of how this form
    /// will be generated</param>
    /// <returns>The created form</returns>
    public IElement? CreateCollectionFormForExtent(
        IExtent extent,
        FormFactoryConfiguration configuration)
    {
        return CreateCollectionFormForExtent(
            extent,
            extent.elements(),
            configuration);
    }


    /// <summary>
    /// Takes the given extent and creates a collection form out of it
    /// </summary>
    /// <param name="extent">Extent to be evaluated.</param>
    /// <param name="collection">Collection to be evaluated</param>
    /// <param name="configuration">Configuration which defines the way of how this form
    /// will be generated</param>
    /// <returns>The created form</returns>
    public IElement? CreateCollectionFormForExtent(
        IExtent extent,
        IReflectiveCollection collection,
        FormFactoryConfiguration configuration)
    {
        using var _ = new StopWatchLogger(Logger, "Timing for CreateCollectionFormForExtent: ", LogLevel.Trace);

        var extentTypes = extent.GetConfiguration().ExtentTypes.ToList();
        IElement? foundForm = null;
        if (configuration.ViaFormFinder)
        {
            var viewFinder = CreateFormFinder();
            foundForm = viewFinder.FindFormsFor(
                new FindFormQuery
                {
                    extentUri = extent.GetUri() ?? string.Empty,
                    workspaceId = extent.GetWorkspace()?.id ?? string.Empty,
                    extentTypes = extentTypes,
                    FormType = _Forms.___FormType.Collection,
                    viewModeId = configuration.ViewModeId ?? "",
                    metaClass = _Management.TheOne.__Extent
                }).FirstOrDefault();

            if (foundForm != null)
            {
                foundForm = FormMethods.CloneForm(foundForm);
                Logger.Info("CreateCollectionFormForExtent: Found form: " + NamedElementMethods.GetFullName(foundForm));
                FormMethods.AddToFormCreationProtocol(
                    foundForm,
                    $"[FormFactory.CreateCollectionFormForExtent] Found Form via FormFinder {foundForm.GetUri()}");
            }
        }

        if (foundForm == null && configuration.ViaFormCreator)
        {
            // Ok, now perform the creation...
            var formCreator = new CollectionFormCreator(WorkspaceLogic, ScopeStorage);
            foundForm = formCreator.CreateCollectionFormForExtent(
                extent,
                extent.elements(),
                configuration);

            FormMethods.AddToFormCreationProtocol(foundForm, "[FormFactory.CreateCollectionFormForExtent] Created Form via FormCreator");
        }

        // Adds the extension forms to the found extent
        if (foundForm != null)
            AddExtensionFormsToObjectOrCollectionForm(
                foundForm,
                new FindFormQuery
                {
                    extentUri = extent.GetUri() ?? string.Empty,
                    workspaceId = extent.GetWorkspace()?.id ?? string.Empty,
                    extentTypes = extentTypes,
                    FormType = _Forms.___FormType.CollectionExtension,
                    viewModeId = configuration.ViewModeId ?? "",
                    metaClass = _Management.TheOne.__Extent
                }, 
                true);

        // 
        if (foundForm != null)
        {
            // Go through each table form to do the latest updates
            foreach (var tableForm in FormMethods.GetTableForms(foundForm))
            {
                // Strip the ParentPropertyNames from the table forms.
                // This is used to avoid that the wrong plugins are called
                tableForm.unset(_Forms._TableForm.property);
                    
                // Sets the data url
                var dataUrl = FormMethods.GetUrlOfTableForm(extent, tableForm);
                tableForm.set(_Forms._TableForm.dataUrl, dataUrl);
            }

            EvaluateTableFormsForAutogenerationByReflectiveCollection(collection, foundForm);

            var formCreationContext = new FormCreationContext
            {
                DetailElement = extent,
                FormType = _Forms.___FormType.Collection,
                ExtentTypes = extentTypes,
                MetaClass = _Management.TheOne.__Extent,
                IsReadOnly = configuration.IsReadOnly
            };

            CallPluginsForCollectionOrObjectForm(configuration, formCreationContext, ref foundForm);
                
            CleanupCollectionForm(foundForm, true);
        }

        return foundForm;
    }

    /// <summary>
    /// Goes through the tabs the collection  form and checks whether the listform required an autogeneration
    /// </summary>
    /// <param name="reflectiveCollection">The reflective collection to be used</param>
    /// <param name="foundForm">The element that has been found</param>
    protected void EvaluateTableFormsForAutogenerationByReflectiveCollection(
        IReflectiveCollection reflectiveCollection, IElement foundForm)
    {
        // Go through the list forms and check if we need to auto-populate
        foreach (var tab in
                 foundForm.getOrDefault<IReflectiveCollection>(_Forms._CollectionForm.tab)
                     .OfType<IElement>())
        {
            var tabMetaClass = tab.getMetaClass();
            if (tabMetaClass == null ||
                !tabMetaClass.equals(_Forms.TheOne.__TableForm))
            {
                // Not a table form
                continue;
            }
                
            var autoGenerate = tab.getOrDefault<bool>(_Forms._TableForm.autoGenerateFields);
            if (autoGenerate)
            {
                FormMethods.AddToFormCreationProtocol(foundForm,
                    $"[FormFactory.EvaluateTableFormsForAutogenerationByReflectiveCollection] Auto Creation of fields by Reflective Collection: {NamedElementMethods.GetName(tab)}");

                var formCreator = new TableFormCreator(WorkspaceLogic, ScopeStorage);
                formCreator.AddToTableFormByElements(
                    tab,
                    reflectiveCollection,
                    new FormFactoryConfiguration());
            }
        }
    }
}