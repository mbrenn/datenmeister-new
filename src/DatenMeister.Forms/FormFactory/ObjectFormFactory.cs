using BurnSystems.Logging;
using DatenMeister.Core;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Helper;
using DatenMeister.Core.Models;
using DatenMeister.Core.Runtime;
using DatenMeister.Core.Runtime.Workspaces;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FormFinder;
using DatenMeister.Forms.FormModifications;

namespace DatenMeister.Forms.FormFactory;

public class ObjectFormFactory(IWorkspaceLogic workspaceLogic, IScopeStorage scopeStorage)
    : FormFactoryBase(workspaceLogic, scopeStorage), IObjectFormFactory
{
    /// <summary>
    ///     Defines the logger
    /// </summary>
    private static readonly ILogger Logger = new ClassLogger(typeof(ObjectFormFactory));
 

    /// <summary>
    /// Creates an empty collection from with one tab including a table definition with name
    /// </summary>
    /// <param name="configuration">Configuration to be used</param>
    /// <returns>The created collection form</returns>
    public IElement CreateEmptyObjectForm(FormFactoryConfiguration configuration)
    {
        var factory = CreateFormCreator().GetMofFactory(configuration);

        var objectForm = factory.create(_Forms.TheOne.__ObjectForm);
        objectForm.set(_Forms._ObjectForm.isAutoGenerated, true);

        var rowForm = factory.create(_Forms.TheOne.__RowForm);
        objectForm.set(_Forms._ObjectForm.tab, new[] { rowForm });
        FormMethods.AddToFormCreationProtocol(
            objectForm,
            "[CreateEmptyObjectForm] Empty object Object-Form created");

        return objectForm;
    }
    
    /// <summary>
    /// Creates an object form for one specific item.
    /// The values and metaclass of the item are evaluated to create the form.  
    /// </summary>
    /// <param name="element">Element to be considered</param>
    /// <param name="configuration">The configuration of how to create the form</param>
    /// <returns>The created form</returns>
    public IElement? CreateObjectFormForItem(IObject element, FormFactoryConfiguration configuration)
    {
        using var _ = new StopWatchLogger(Logger, "Timing for CreateObjectFormForItem: ", LogLevel.Trace);
        var metaClass = (element as IElement)?.getMetaClass();

        // Ok, not an extent now do the right things
        IElement? foundForm = null;

        var extent = (element as IHasExtent)?.Extent;
        if (extent == null)
            throw new InvalidOperationException("Item Tree for extent-less object can't be created");

        var extentTypes = extent.GetConfiguration().ExtentTypes.ToList();

        string? packageViewMode = null;

        // Checks if the current item is a package and if the viewmode is defined by the package itself
        if (DefaultClassifierHints.IsPackageLike(element))
        {
            packageViewMode =
                element.getOrDefault<string>(_CommonTypes._Default._Package.defaultViewMode);
        }

        packageViewMode = string.IsNullOrEmpty(packageViewMode) ? ViewModes.Default : packageViewMode;

        if (configuration.ViaFormFinder)
        {
            var viewFinder = CreateFormFinder();
            foundForm = viewFinder.FindFormsFor(new FindFormQuery
            {
                extentUri = extent.GetUri() ?? string.Empty,
                workspaceId = extent.GetWorkspace()?.id ?? string.Empty,
                extentTypes = extentTypes.ToList(),
                metaClass = metaClass,
                FormType = _Forms.___FormType.Object,
                viewModeId = configuration.ViewModeId ?? packageViewMode
            }).FirstOrDefault();

            if (foundForm != null)
            {
                Logger.Info(
                    "CreateObjectFormForItem: Found form: " + NamedElementMethods.GetFullName(foundForm));
                FormMethods.AddToFormCreationProtocol(foundForm,
                    "[FormFactory.CreateObjectFormForItem] Found Form via FormFinder: " + foundForm.GetUri());
            }
        }

        if (foundForm == null && configuration.ViaFormCreator)
        {
            var formCreator = CreateFormCreator();
            foundForm = formCreator.CreateObjectFormForItem(
                element,
                configuration with
                {
                    AllowFormModifications = false
                });

            FormMethods.AddToFormCreationProtocol(foundForm,
                "[FormFactory.CreateObjectFormForItem] Created Form via FormCreator");
        }

        if (foundForm != null)
        {
            foundForm = FormMethods.CloneForm(foundForm);

            // Adds the extension forms to the found extent
            AddExtensionFormsToObjectOrCollectionForm(
                foundForm,
                new FindFormQuery
                {
                    extentUri = extent.GetUri() ?? string.Empty,
                    workspaceId = extent.GetWorkspace()?.id ?? string.Empty,
                    extentTypes = extent.GetConfiguration().ExtentTypes,
                    metaClass = (element as IElement)?.getMetaClass(),
                    FormType = _Forms.___FormType.ObjectExtension,
                    viewModeId = configuration.ViewModeId ?? packageViewMode
                }, 
                true);

            if (element is IElement asElement)
            {
                EvaluateTableFormsForAutogenerationByItem(asElement, foundForm);

                // This call is required to add the new buttons to the list form 
                // in case the creator of the form did not have these buttons included
                FormMethods.AddDefaultTypesInListFormByElementsProperty(foundForm, asElement);
            }

            var formCreationContext = new FormCreationContext
            {
                FormType = _Forms.___FormType.Object,
                MetaClass = (element as IElement)?.metaclass,
                DetailElement = element,
                IsReadOnly = configuration.IsReadOnly,
                ExtentTypes = extentTypes
            };

            CallPluginsForCollectionOrObjectForm(configuration, formCreationContext, ref foundForm);

            CleanupObjectForm(foundForm, true);
        }

        // No Form
        return foundForm;
    }

    /// <summary>
    /// Creates an object form by the metaclass definition
    /// </summary>
    /// <param name="metaClass">Metaclass to be queried</param>
    /// <param name="configuration">The form configuration to be used</param>
    /// <returns>The found or created form. If none is found, then null will be returned </returns>
    public IElement? CreateObjectFormForMetaClass(IElement metaClass, FormFactoryConfiguration configuration)
    {
        using var _ = new StopWatchLogger(Logger, "Timing for CreateObjectFormForMetaClass: ", LogLevel.Trace);
        // Ok, not an extent now do the right things
        IElement? foundForm = null;

        // Checks if the current item is a package and if the viewmode
        if (configuration.ViaFormFinder)
        {
            var viewFinder = CreateFormFinder();
            foundForm = viewFinder.FindFormsFor(new FindFormQuery
            {
                metaClass = metaClass,
                FormType = _Forms.___FormType.Object,
                viewModeId = configuration.ViewModeId
            }).FirstOrDefault();

            if (foundForm != null)
            {
                foundForm = FormMethods.CloneForm(foundForm);
                Logger.Info("CreateObjectFormForMetaClass: Found form: " + NamedElementMethods.GetFullName(foundForm));
                FormMethods.AddToFormCreationProtocol(foundForm,
                    "[FormFactory.CreateObjectFormForMetaClass] Found Form via FormFinder: " + foundForm.GetUri());
            }
        }

        if (foundForm == null && configuration.ViaFormCreator)
        {
            var formCreator = CreateFormCreator();
            foundForm = formCreator.CreateObjectFormForMetaClass(
                metaClass,
                new FormFactoryConfiguration { IncludeOnlyCommonProperties = true, AllowFormModifications = false});

            FormMethods.AddToFormCreationProtocol(foundForm, "[FormFactory.CreateObjectFormForItem] Created Form via FormCreator");
        }

        if (foundForm != null)
        {
            foundForm = FormMethods.CloneForm(foundForm);

            // Adds the extension forms to the found extent
            AddExtensionFormsToObjectOrCollectionForm(
                foundForm,
                new FindFormQuery
                {
                    metaClass = metaClass,
                    FormType = _Forms.___FormType.ObjectExtension,
                    viewModeId = configuration.ViewModeId ?? ViewModes.Default
                });
                
            var formCreationContext = new FormCreationContext
            {
                FormType = _Forms.___FormType.Object,
                MetaClass = metaClass,
                IsReadOnly = configuration.IsReadOnly
            };

            CallPluginsForCollectionOrObjectForm(configuration, formCreationContext, ref foundForm);
                
            CleanupObjectForm(foundForm, true);
        }

        // No Form
        return foundForm;
    }
}