using DatenMeister.Core.EMOF.Interface.Common;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Helper;
using DatenMeister.Core.Models;
using DatenMeister.Core.Models.EMOF;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.Fields;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.ObjectForm;

public class AddTableFormForPackagedElements : FormFactoryBase, IObjectFormFactory
{
    public void CreateObjectForm(
        ObjectFormFactoryParameter parameter,
        FormCreationContext context,
        FormCreationResultOneForm result)
    {
        // Checks, if Object has a property of packagedElement
        var elementContainsPackagedElement = 
            parameter.Element?.isSet(_UML._Packages._Package.packagedElement) == true;
        
        if ((!elementContainsPackagedElement) || result.Form == null)
        {
            return;
        }

        var factory = context.Global.Factory;
        var elementsAsObjects = parameter.Element.getOrDefault<IReflectiveCollection>(
            _UML._Packages._Package.packagedElement).OfType<IElement>().ToList();

        // We care about the packaged elements
        // If the property for the list is 'packagedElement', then create multiple subforms...
        var elementsWithoutMetaClass = elementsAsObjects
            .Where(x => x.getMetaClass() == null)
            .ToList();

        var elementsWithMetaClass = elementsAsObjects
            .Select(x => x.getMetaClass())
            .Where(x => x != null)
            .Distinct(new FieldCreationHelper.P.MofObjectComparer());

        if (elementsWithoutMetaClass.Any() || !elementsAsObjects.Any())
        {
            // If there are elements included and they are filled
            // OR, if there is no element included at all, create the corresponding list form
            var form = factory.create(_Forms.TheOne.__TableForm);
            form.set(_Forms._TableForm.name, "packagedElements without MetaClass");
            form.set(_Forms._TableForm.property, _UML._Packages._Package.packagedElement);
            form.set(_Forms._TableForm.noItemsWithMetaClass, true);
            form.set(_Forms._TableForm.isAutoGenerated, true);

            foreach (var item in elementsWithoutMetaClass)
            {
                FieldCreationHelper.AddFieldsToFormByPropertyValues(form, item, parameter, context);
            }

            result.AddToFormCreationProtocol(
                "[FormCreator.CreateObjectFormForItem]: Added specific Sub-TableForm for 'packagedElement'");

            result.Form.AddCollectionItem(_Forms._ObjectForm.tab, form);
        }

        foreach (var metaClass in elementsWithMetaClass)
        {
            var innerContext = context.Clone();

            var forms = FormCreation.CreateTableForm(
                new TableFormFactoryParameter
                {
                    MetaClass = metaClass,
                    Extent = parameter.Extent,
                    ExtentTypes = parameter.ExtentTypes
                },
                innerContext);

            foreach (var form in forms.Forms)
            {
                form.set(_Forms._TableForm.property, _UML._Packages._Package.packagedElement);
                
                result.AddToFormCreationProtocol(
                    "[FormCreator.CreateObjectFormForItem]: Add Table Form for metaclass:" +
                    NamedElementMethods.GetName(metaClass));
                
                result.Form.AddCollectionItem(_Forms._ObjectForm.tab, form);
            }
        }

        result.IsManaged = result.IsMainContentCreated = true;
    }
}