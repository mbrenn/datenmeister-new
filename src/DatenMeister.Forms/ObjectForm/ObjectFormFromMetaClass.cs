using BurnSystems.Logging;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.Fields;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.ObjectForm;

public class ObjectFormFromMetaClass : IObjectFormFactory
{
    private static readonly ILogger Logger = new ClassLogger(typeof(ObjectFormFromMetaClass));

    /// <summary>
    /// Creates an object form for one specific item.
    /// The values and metaclass of the item are evaluated to create the form.  
    /// </summary>
    /// <param name="parameter">Parameter to be considered</param>
    /// <param name="context">The configuration of how to create the form</param>
    /// <param name="result">Result of the activity</param>
    /// <returns>The created form</returns>
    public void CreateObjectForm(
        ObjectFormFactoryParameter parameter,
        FormCreationContext context,
        FormCreationResultOneForm result)
    {
        if (result.IsMainContentCreated)
            return;
        
        var tabs = new List<IElement>();
        var parameterMetaclass = parameter.MetaClass;
        var factory = context.Global.Factory;
        result.Form ??= factory.create(_Forms.TheOne.__ObjectForm);

        if (parameterMetaclass != null)
        {
            var propertyNamesWithCollection = new List<FieldCreationHelper.P>();
            var propertyNamesWithoutCollection = new List<FieldCreationHelper.P>();

            var metaClassProperties = ClassifierMethods.GetPropertiesOfClassifier(parameterMetaclass);
            foreach (var property in metaClassProperties)
            {
                if (PropertyMethods.IsCollection(property))
                {
                    propertyNamesWithCollection.Add(
                        new FieldCreationHelper.P
                        {
                            PropertyName = NamedElementMethods.GetName(property),
                            PropertyType = PropertyMethods.GetPropertyType(property),
                            Property = property
                        });
                }
                    
                // As a temporary workaround, we do also add the collections to the detail view
                propertyNamesWithoutCollection.Add(
                    new FieldCreationHelper.P
                    {
                        PropertyName = NamedElementMethods.GetName(property),
                        PropertyType = property,
                        Property = property
                    });
            }
            
            result.Form.set(_Forms._RowForm.isAutoGenerated, true);
            result.Form.set(
                _Forms._RowForm.name,
                $"Object Form for '{NamedElementMethods.GetFullName(parameterMetaclass)}'");

            var rowForm = FormCreation.CreateRowForm(
                new RowFormFactoryParameter
                {
                    MetaClass = parameterMetaclass,
                    ExtentTypes = parameter.ExtentTypes,
                    Extent = parameter.Extent
                }, context.Clone());

            foreach(var form in rowForm.Forms)
            {
                tabs.Add(form);
                result.IsManaged = result.IsMainContentCreated = true;
            }
            
            // Now create all the Table Forms for the Properties with enumeration
            foreach (var pair in propertyNamesWithCollection)
            {
                var propertyName = pair.PropertyName;

                result.AddToFormCreationProtocol(
                    "[FormCreator.CreateObjectFormForItem]: Add Table Form for by reflective collection: " +
                    propertyName);

                // If there are elements included and they are filled
                // OR, if there is no element included at all, create the corresponding list form
                var forms = FormCreation.CreateTableForm(
                    new TableFormFactoryParameter
                    {
                        Extent = parameter.Extent,
                        ExtentTypes = parameter.ExtentTypes,
                        MetaClass = pair.PropertyType,
                        PropertyName = propertyName
                    },
                    context.Clone()).Forms;

                foreach (var form in forms)
                {
                    form.set(_Forms._TableForm.name, $"Property: {propertyName}");
                    form.set(_Forms._TableForm.property, propertyName);

                    // Adds the form to the tabs
                    tabs.Add(form);
                }
            }
        }

        if (tabs.Count > 0)
        {
            result.Form.set(_Forms._CollectionForm.tab, tabs);
            result.IsMainContentCreated = result.IsManaged = true;
        }
    }
}