using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.Fields;
using DatenMeister.Forms.FormFactory;
using DatenMeister.Forms.Helper;

namespace DatenMeister.Forms.RowForm;

public class RowFormFromData : INewRowFormFactory
{
    public void CreateRowFormForItem(IObject element, NewFormCreationContext context, FormCreationResult result)
    {
        var createdForm =
            result.Form ??= context.Global.Factory.create(_Forms.TheOne.__RowForm);
        createdForm.set(_Forms._RowForm.name, "Item");
        createdForm.set(_Forms._RowForm.isAutoGenerated, true);

        result.AddToFormCreationProtocol(
            "[RowFormFromData.CreateRowFormForItem]: " + NamedElementMethods.GetName(element));

        var metaClass = (element as IElement)?.metaclass;
        if (metaClass != null)
        {
            FieldCreationHelper.AddFieldsToRowOrTableFormByMetaClass(createdForm, metaClass, context);
            result.IsManaged = result.IsMainContentCreated = true;
        }

        // TODO CleanupRowForm(createdForm);
    }

    public void CreateRowFormForMetaClass(IElement metaClass, NewFormCreationContext context, FormCreationResult result)
    {
        var createdForm =
            result.Form ??= context.Global.Factory.create(_Forms.TheOne.__RowForm);
        var name = NamedElementMethods.GetName(metaClass);
        createdForm.set(_Forms._RowForm.name, $"{name} - Detail");
        createdForm.set(_Forms._RowForm.isAutoGenerated, true);

        FormMethods.AddToFormCreationProtocol(
            createdForm,
            "[FormCreator.CreateRowFormByMetaClass]: " + NamedElementMethods.GetName(metaClass));

        if (!FieldCreationHelper.AddFieldsToRowOrTableFormByMetaClass(createdForm, metaClass, context))
        {
            createdForm.set(_Forms._RowForm.allowNewProperties, true);
        }

        // TODO: CleanupRowForm(createdForm);
        result.IsManaged = result.IsMainContentCreated = true;
    }
}