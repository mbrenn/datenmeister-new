using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.Fields;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.RowForm;

public class RowFormFromData : IRowFormFactory
{
    public void CreateRowForm(RowFormFactoryParameter parameter, FormCreationContext context,
        FormCreationResultMultipleForms result)
    {
        if (result.IsMainContentCreated)
            return;

        var element = parameter.Element;
        if (result.Forms.Count == 0)
        {
            result.Forms.Add(context.Global.Factory.create(_Forms.TheOne.__RowForm));
        }

        var createdForm = result.Forms.First();

        var metaClass = (element as IElement)?.metaclass;
        if (metaClass != null)
        {
            createdForm.set(_Forms._RowForm.name, "Item");
            createdForm.set(_Forms._RowForm.isAutoGenerated, true);

            result.AddToFormCreationProtocol(
                "[RowFormFromData.CreateRowFormForItem]: " + NamedElementMethods.GetName(element));
            
            FieldCreationHelper.AddFieldsToRowOrTableFormByMetaClass(
                createdForm,
                metaClass,
                parameter,
                context);
            result.IsManaged = result.IsMainContentCreated = true;
        }
        
        // Second phase: Get properties by the object itself
        // This item does not have a metaclass and also no properties, so we try to find them by using the item

        if(element is IObjectAllProperties itemAsAllProperties)
        {
            FieldCreationHelper.AddFieldsToFormByPropertyValues(
                createdForm,
                itemAsAllProperties,
                parameter,
                context);
            createdForm.set(_Forms._RowForm.allowNewProperties, true);
        }
    }
}