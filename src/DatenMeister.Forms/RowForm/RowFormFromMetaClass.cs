using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.Fields;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.RowForm;

public class RowFormFromMetaClass : FormFactoryBase, IRowFormFactory
{
    public void CreateRowForm(RowFormFactoryParameter parameter, FormCreationContext context,
        FormCreationResultMultipleForms result)
    {
        if (result.IsMainContentCreated || parameter.MetaClass == null)
            return;
        
        var element = parameter.Element;
        var parameterMetaClass = parameter.MetaClass;

        if (!result.Forms.Any())
        {
            result.Forms.Add(context.Global.Factory.create(_Forms.TheOne.__RowForm));
        };
        
        var createdForm = result.Forms.First();

        if (parameterMetaClass != null)
        {
            var name = NamedElementMethods.GetName(parameterMetaClass);
            createdForm.set(_Forms._RowForm.name, $"{name} - Detail");
            createdForm.set(_Forms._RowForm.isAutoGenerated, true);

            result.AddToFormCreationProtocol(
                "[FormCreator.CreateRowFormByMetaClass]: " + NamedElementMethods.GetName(parameterMetaClass));

            if (!FieldCreationHelper.AddFieldsToRowOrTableFormByMetaClass(
                    createdForm, parameterMetaClass, parameter, context))
            {
                createdForm.set(_Forms._RowForm.allowNewProperties, true);
            }

            result.IsManaged = result.IsMainContentCreated = true;
        }
    }
}