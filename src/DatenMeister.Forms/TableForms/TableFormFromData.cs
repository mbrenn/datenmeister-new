using DatenMeister.Core.EMOF.Interface.Common;
using DatenMeister.Core.EMOF.Interface.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Core.Uml.Helper;
using DatenMeister.Forms.FieldFactory;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.TableForms;

public class TableFormFromData : INewTableFormFactory
{
    public void CreateTableFormForCollection(
        IReflectiveCollection collection, 
        NewFormCreationContext context,
        FormCreationResult result)
    {
        throw new NotImplementedException();
    }

    public void CreateTableFormForMetaclass(
        IElement metaClass,
        NewFormCreationContext context,
        FormCreationResult result)
    {
        var tableFormForPropertyValues = context.Global.Factory.create(_Forms.TheOne.__TableForm);
        tableFormForPropertyValues.set(_Forms._TableForm.isAutoGenerated, true);

        FormMethods.AddToFormCreationProtocol(
            tableFormForPropertyValues,
            "[FormCreator.CreateTableFormForProperty]");

        FieldCreationHelper.AddFieldsToRowOrTableFormByMetaClass(tableFormForPropertyValues, metaClass, context);
        tableFormForPropertyValues.set(_Forms._TableForm.metaClass, metaClass);
        FormMethods.AddDefaultTypeForNewElement(tableFormForPropertyValues, metaClass);

        FormMethods.AddToFormCreationProtocol(
            tableFormForPropertyValues,
            "[FormCreator.CreateTableFormForProperty] Set default type: " +
            NamedElementMethods.GetName(metaClass));

        result.Result =  tableFormForPropertyValues;
        result.IsManaged = result.IsMainContentCreated = true;
    }
}