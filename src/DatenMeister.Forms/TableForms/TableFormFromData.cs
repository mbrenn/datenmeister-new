using DatenMeister.Core.Interfaces.MOF.Reflection;
using DatenMeister.Core.Models;
using DatenMeister.Forms.Fields;
using DatenMeister.Forms.FormFactory;

namespace DatenMeister.Forms.TableForms;

public class TableFormFromData : FormFactoryBase, ITableFormFactory
{
    /// <summary>
    /// Creates the Table Form
    /// </summary>
    /// <param name="parameter"></param>
    /// <param name="context"></param>
    /// <param name="result"></param>
    public void CreateTableForm(
        TableFormFactoryParameter parameter,
        FormCreationContext context,
        FormCreationResultMultipleForms result)
    {
        if (result.IsMainContentCreated)
            return;

        var collection = parameter.Collection;
        if (collection != null)
        {
            if (!result.Forms.Any())
            {
                result.Forms.Add(context.Global.Factory.create(_Forms.TheOne.__RowForm));
            };
            
            var createdForm = result.Forms.First();
            createdForm.set(_Forms._TableForm.isAutoGenerated, true);

            // Figure out only the elements which have common properties
            foreach (var element in collection.OfType<IObject>())
            {
                var innerMetaClass = (element as IElement)?.metaclass;
                if (innerMetaClass != null)
                {
                    FieldCreationHelper.AddFieldsToRowOrTableFormByMetaClass(
                        createdForm,
                        innerMetaClass,
                        parameter,
                        context);
                }
                else
                {
                    // Go through the properties and create an item
                    FieldCreationHelper.AddFieldsToFormByPropertyValues(
                        createdForm,
                        element,
                        parameter,
                        context);
                }
            }

            result.IsManaged = result.IsMainContentCreated = true;
        }
    }
}