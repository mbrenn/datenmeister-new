@page "/ItemsOverview/{workspace}/{extent}"
@using DatenMeister.WebServer.Controller
@using DatenMeister.Core.EMOF.Interface.Common
@using DatenMeister.Core.EMOF.Interface.Reflection
@using DatenMeister.Core.Helper
@using DatenMeister.Core.Models

<div class="dm-maincontent">
    <h3>Items Overview</h3>
    <p>Workspace: @Workspace</p>
    <p>Extent: @Extent</p>
    
    <div>
        <table>
            <tr>
                @foreach (var field in Fields)
                {
                    <th>
                        @(field.getOrDefault<string>(_DatenMeister._Forms._FieldData.title))
                    </th>
                }
            </tr>
            @foreach (var item in Items!.OfType<IObject>())
            {
                <tr>
                @foreach (var field in Fields)
                {
                    <td>@(item.getOrDefault<string>(field.getOrDefault<string>(
                            _DatenMeister._Forms._FieldData.name)))
                        </td>
                }
                </tr>
            }
        </table>
    </div>
</div>


@code {
    [Parameter]
    public string Workspace { get; set; } = string.Empty;

    [Parameter]
    public string Extent { get; set; } = string.Empty;
    
    [Inject]
    public ExtentController? ExtentController { get; set; }
    
    public IReflectiveCollection? Items { get; set; }
    
    public IObject? Form { get; set; }

    public List<IElement> Fields = new();

    protected override void OnInitialized()
    {
        if (ExtentController == null) throw new InvalidOperationException("ExtentController is not set");
        
        var result = ExtentController.GetItems(Workspace, Extent);
        if (result == null)
        {
            throw new InvalidOperationException($"Items not found: {Workspace}/{Extent}");
        }

        Items = XmiHelper.ConvertCollectionFromXmi(result.items)
                ?? throw new InvalidOperationException("Items are null. They may not be null");
        Form = XmiHelper.ConvertItemFromXmi(result.form)
               ?? throw new InvalidOperationException("Form is null. It may not be null");

        foreach (var field in 
            Form.get<IReflectiveCollection>(_DatenMeister._Forms._ListForm.field).OfType<IElement>())
        {
            Fields.Add(field);
        }

        foreach (var tab in 
            Form.get<IReflectiveCollection>(_DatenMeister._Forms._ExtentForm.tab).OfType<IElement>())
        {
            foreach (var field in 
                tab.get<IReflectiveCollection>(_DatenMeister._Forms._ListForm.field).OfType<IElement>())
            {
                Fields.Add(field);
            }
        }

        base.OnInitialized();
    }
}
